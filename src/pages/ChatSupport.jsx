import { useState, useEffect } from 'react'
import { motion } from 'framer-motion'
import { toast } from 'react-hot-toast'
import { 
  Send, 
  Phone, 
  Mail, 
  MessageCircle, 
  User, 
  Clock,
  CheckCircle,
  AlertCircle,
  FileText,
  Building,
  HelpCircle
} from 'lucide-react'

const ChatSupport = ({ darkMode }) => {
  const [messages, setMessages] = useState([])
  const [newMessage, setNewMessage] = useState('')
  const [isTyping, setIsTyping] = useState(false)
  const [selectedTopic, setSelectedTopic] = useState('')

  const topics = [
    {
      id: 'general',
      title: '–ó–∞–≥–∞–ª—å–Ω—ñ –ø–∏—Ç–∞–Ω–Ω—è',
      description: '–ó–∞–≥–∞–ª—å–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—é',
      icon: HelpCircle
    },
    {
      id: 'application',
      title: '–ü–æ–¥–∞—á–∞ –∑–∞—è–≤–∫–∏',
      description: '–î–æ–ø–æ–º–æ–≥–∞ –∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è–º –∑–∞—è–≤–∫–∏',
      icon: FileText
    },
    {
      id: 'contract',
      title: '–î–æ–≥–æ–≤—ñ—Ä —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—ó',
      description: '–ü–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –¥–æ–≥–æ–≤–æ—Ä—É',
      icon: FileText
    },
    {
      id: 'payment',
      title: '–ü–ª–∞—Ç–µ–∂—ñ',
      description: '–ü–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ –ø–ª–∞—Ç–µ–∂—ñ–≤',
      icon: Building
    },
    {
      id: 'technical',
      title: '–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞',
      description: '–¢–µ—Ö–Ω—ñ—á–Ω—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ —Å–∞–π—Ç–æ–º',
      icon: MessageCircle
    }
  ]

  // –ú–æ–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  const initialMessages = [
    {
      id: 1,
      text: '–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –ß–∏–º –º–æ–∂—É –¥–æ–ø–æ–º–æ–≥—Ç–∏?',
      sender: 'support',
      timestamp: new Date(Date.now() - 300000),
      avatar: 'üë®‚Äçüíº'
    },
    {
      id: 2,
      text: '–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! –£ –º–µ–Ω–µ —î –ø–∏—Ç–∞–Ω–Ω—è —â–æ–¥–æ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—ó –±–æ—Ä–≥—É.',
      sender: 'user',
      timestamp: new Date(Date.now() - 240000),
      avatar: 'üë§'
    },
    {
      id: 3,
      text: '–ó–≤–∏—á–∞–π–Ω–æ! –Ø –≥–æ—Ç–æ–≤–∏–π –¥–æ–ø–æ–º–æ–≥—Ç–∏ –≤–∞–º –∑ –ø–∏—Ç–∞–Ω–Ω—è–º–∏ —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—ó. –©–æ —Å–∞–º–µ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å?',
      sender: 'support',
      timestamp: new Date(Date.now() - 180000),
      avatar: 'üë®‚Äçüíº'
    }
  ]

  useEffect(() => {
    setMessages(initialMessages)
  }, [])

  const handleSendMessage = () => {
    if (!newMessage.trim()) return

    const userMessage = {
      id: Date.now(),
      text: newMessage,
      sender: 'user',
      timestamp: new Date(),
      avatar: 'üë§'
    }

    setMessages(prev => [...prev, userMessage])
    setNewMessage('')
    setIsTyping(true)

    // –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    setTimeout(() => {
      const supportResponse = getSupportResponse(newMessage)
      const supportMessage = {
        id: Date.now() + 1,
        text: supportResponse,
        sender: 'support',
        timestamp: new Date(),
        avatar: 'üë®‚Äçüíº'
      }
      setMessages(prev => [...prev, supportMessage])
      setIsTyping(false)
    }, 1500)
  }

  const getSupportResponse = (message) => {
    const lowerMessage = message.toLowerCase()
    
    if (lowerMessage.includes('—Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è') || lowerMessage.includes('—Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏—è')) {
      return '–†–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—è –±–æ—Ä–≥—É - —Ü–µ –ø—Ä–æ—Ü–µ—Å –∑–º—ñ–Ω–∏ —É–º–æ–≤ –ø–æ–≥–∞—à–µ–Ω–Ω—è –∑–∞–±–æ—Ä–≥–æ–≤–∞–Ω–æ—Å—Ç—ñ. –ú–∏ –¥–æ–ø–æ–º–∞–≥–∞—î–º–æ –∑–º–µ–Ω—à–∏—Ç–∏ —â–æ–º—ñ—Å—è—á–Ω—ñ –ø–ª–∞—Ç–µ–∂—ñ —Ç–∞ —Ä–æ–∑—Ç—è–≥–Ω—É—Ç–∏ —Ç–µ—Ä–º—ñ–Ω –ø–æ–≥–∞—à–µ–Ω–Ω—è –Ω–∞ –±—ñ–ª—å—à –∫–æ–º—Ñ–æ—Ä—Ç–Ω–∏–π –ø–µ—Ä—ñ–æ–¥.'
    }
    
    if (lowerMessage.includes('–∑–∞—è–≤–∫–∞') || lowerMessage.includes('–∑–∞—è–≤–∫—É')) {
      return '–î–ª—è –ø–æ–¥–∞—á—ñ –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–π–¥—ñ—Ç—å –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É "–ü–æ–¥–∞—Ç–∏ –∑–∞—è–≤–∫—É" —Ç–∞ –∑–∞–ø–æ–≤–Ω—ñ—Ç—å —Ñ–æ—Ä–º—É. –í–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ –≤–∫–∞–∑–∞—Ç–∏ –æ—Å–æ–±–∏—Å—Ç—ñ –¥–∞–Ω—ñ, —Å—É–º—É –±–æ—Ä–≥—É —Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é.'
    }
    
    if (lowerMessage.includes('–¥–æ–≥–æ–≤—ñ—Ä') || lowerMessage.includes('–¥–æ–≥–æ–≤–æ—Ä')) {
      return '–ü—ñ—Å–ª—è —Å—Ö–≤–∞–ª–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –º–∏ –ø—ñ–¥–≥–æ—Ç—É—î–º–æ –¥–æ–≥–æ–≤—ñ—Ä —Ä–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü—ñ—ó. –í–∏ –∑–º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è –∑ –Ω–∏–º —É –æ—Å–æ–±–∏—Å—Ç–æ–º—É –∫–∞–±—ñ–Ω–µ—Ç—ñ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –¥–ª—è –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è.'
    }
    
    if (lowerMessage.includes('–ø–ª–∞—Ç—ñ–∂') || lowerMessage.includes('–ø–ª–∞—Ç–µ–∂')) {
      return '–ü—ñ—Å–ª—è –ø—ñ–¥–ø–∏—Å–∞–Ω–Ω—è –¥–æ–≥–æ–≤–æ—Ä—É –≤–∏ –±—É–¥–µ—Ç–µ –∑–¥—ñ–π—Å–Ω—é–≤–∞—Ç–∏ –ø–ª–∞—Ç–µ–∂—ñ –∑–≥—ñ–¥–Ω–æ –∑ –Ω–æ–≤–∏–º –≥—Ä–∞—Ñ—ñ–∫–æ–º. –°—É–º–∞ —â–æ–º—ñ—Å—è—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É –±—É–¥–µ –º–µ–Ω—à–æ—é, –Ω—ñ–∂ —Ä–∞–Ω—ñ—à–µ.'
    }
    
    return '–î—è–∫—É—é –∑–∞ –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è! –ù–∞—à —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –¥–µ—Ç–∞–ª—å–Ω–æ –≤–∏–≤—á–∏—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ –Ω–∞–¥–∞—Å—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º. –Ø–∫—â–æ –ø–∏—Ç–∞–Ω–Ω—è —Ç–µ—Ä–º—ñ–Ω–æ–≤–µ, –º–æ–∂–µ—Ç–µ –∑–∞—Ç–µ–ª–µ—Ñ–æ–Ω—É–≤–∞—Ç–∏ –Ω–∞–º –∑–∞ –Ω–æ–º–µ—Ä–æ–º +380 44 123 45 67.'
  }

  const handleTopicSelect = (topicId) => {
    setSelectedTopic(topicId)
    const topic = topics.find(t => t.id === topicId)
    if (topic) {
      toast.success(`–û–±—Ä–∞–Ω–æ —Ç–µ–º—É: ${topic.title}`)
    }
  }

  const formatTime = (date) => {
    return date.toLocaleTimeString('uk-UA', { 
      hour: '2-digit', 
      minute: '2-digit' 
    })
  }

  return (
    <div className={`min-h-screen py-12 transition-colors duration-300 ${
      darkMode ? 'bg-gray-900' : 'bg-gray-50'
    }`}>
      <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
        {/* Header */}
        <motion.div 
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="text-center mb-12"
        >
          <div className={`inline-flex items-center justify-center w-16 h-16 rounded-full mb-6 ${
            darkMode ? 'bg-primary-900' : 'bg-primary-100'
          }`}>
            <MessageCircle className="w-8 h-8 text-primary-600" />
          </div>
          <h1 className={`text-4xl font-bold mb-4 ${
            darkMode ? 'text-white' : 'text-gray-900'
          }`}>
            –ü—ñ–¥—Ç—Ä–∏–º–∫–∞
          </h1>
          <p className={`text-lg ${
            darkMode ? 'text-gray-300' : 'text-gray-600'
          }`}>
            –û—Ç—Ä–∏–º–∞–π—Ç–µ –¥–æ–ø–æ–º–æ–≥—É –≤—ñ–¥ –Ω–∞—à–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤
          </p>
        </motion.div>

        <div className="grid lg:grid-cols-3 gap-8">
          {/* Topics Sidebar */}
          <motion.div 
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.2 }}
            className="lg:col-span-1"
          >
            <div className={`p-6 rounded-2xl shadow-soft ${
              darkMode ? 'bg-gray-800 border border-gray-700' : 'bg-white'
            }`}>
              <h2 className={`text-xl font-semibold mb-6 ${
                darkMode ? 'text-white' : 'text-gray-900'
              }`}>
                –¢–µ–º–∏ –∑–≤–µ—Ä–Ω–µ–Ω—å
              </h2>
              <div className="space-y-3">
                {topics.map((topic) => (
                  <button
                    key={topic.id}
                    onClick={() => handleTopicSelect(topic.id)}
                    className={`w-full p-4 rounded-xl text-left transition-all duration-200 ${
                      selectedTopic === topic.id
                        ? `${darkMode ? 'bg-primary-900/20 border-primary-700' : 'bg-primary-50 border-primary-200'} border`
                        : `${darkMode ? 'hover:bg-gray-700' : 'hover:bg-gray-50'}`
                    }`}
                  >
                    <div className="flex items-center space-x-3">
                      <div className={`p-2 rounded-lg ${
                        darkMode ? 'bg-gray-700' : 'bg-gray-100'
                      }`}>
                        <topic.icon className={`w-5 h-5 ${
                          darkMode ? 'text-primary-400' : 'text-primary-600'
                        }`} />
                      </div>
                      <div>
                        <h3 className={`font-medium ${
                          darkMode ? 'text-white' : 'text-gray-900'
                        }`}>
                          {topic.title}
                        </h3>
                        <p className={`text-sm ${
                          darkMode ? 'text-gray-400' : 'text-gray-600'
                        }`}>
                          {topic.description}
                        </p>
                      </div>
                    </div>
                  </button>
                ))}
              </div>

              {/* Contact Info */}
              <div className={`mt-8 p-4 rounded-xl ${
                darkMode ? 'bg-gray-700/50' : 'bg-gray-50'
              }`}>
                <h3 className={`font-semibold mb-3 ${
                  darkMode ? 'text-white' : 'text-gray-900'
                }`}>
                  –ö–æ–Ω—Ç–∞–∫—Ç–∏
                </h3>
                <div className="space-y-2">
                  <div className="flex items-center space-x-2">
                    <Phone className={`w-4 h-4 ${
                      darkMode ? 'text-primary-400' : 'text-primary-600'
                    }`} />
                    <span className={`${
                      darkMode ? 'text-gray-300' : 'text-gray-700'
                    }`}>
                      +380 44 123 45 67
                    </span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <Mail className={`w-4 h-4 ${
                      darkMode ? 'text-primary-400' : 'text-primary-600'
                    }`} />
                    <span className={`${
                      darkMode ? 'text-gray-300' : 'text-gray-700'
                    }`}>
                      support@mirna-ugoda.ua
                    </span>
                  </div>
                </div>
              </div>
            </div>
          </motion.div>

          {/* Chat Area */}
          <motion.div 
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            transition={{ duration: 0.6, delay: 0.4 }}
            className="lg:col-span-2"
          >
            <div className={`h-[600px] rounded-2xl shadow-soft flex flex-col ${
              darkMode ? 'bg-gray-800 border border-gray-700' : 'bg-white'
            }`}>
              {/* Chat Header */}
              <div className={`p-4 border-b ${
                darkMode ? 'border-gray-700' : 'border-gray-200'
              }`}>
                <div className="flex items-center space-x-3">
                  <div className={`w-10 h-10 rounded-full flex items-center justify-center ${
                    darkMode ? 'bg-primary-900' : 'bg-primary-100'
                  }`}>
                    <User className={`w-5 h-5 ${
                      darkMode ? 'text-primary-400' : 'text-primary-600'
                    }`} />
                  </div>
                  <div>
                    <h3 className={`font-semibold ${
                      darkMode ? 'text-white' : 'text-gray-900'
                    }`}>
                      –°–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç –ø—ñ–¥—Ç—Ä–∏–º–∫–∏
                    </h3>
                    <div className="flex items-center space-x-2">
                      <div className={`w-2 h-2 rounded-full ${
                        darkMode ? 'bg-green-400' : 'bg-green-500'
                      }`}></div>
                      <span className={`text-sm ${
                        darkMode ? 'text-gray-400' : 'text-gray-600'
                      }`}>
                        –û–Ω–ª–∞–π–Ω
                      </span>
                    </div>
                  </div>
                </div>
              </div>

              {/* Messages */}
              <div className="flex-1 overflow-y-auto p-4 space-y-4">
                {messages.map((message) => (
                  <motion.div
                    key={message.id}
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.3 }}
                    className={`flex ${message.sender === 'user' ? 'justify-end' : 'justify-start'}`}
                  >
                    <div className={`max-w-xs lg:max-w-md ${
                      message.sender === 'user' ? 'order-2' : 'order-1'
                    }`}>
                      <div className={`flex items-end space-x-2 ${
                        message.sender === 'user' ? 'flex-row-reverse space-x-reverse' : ''
                      }`}>
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center text-sm ${
                          message.sender === 'user' 
                            ? (darkMode ? 'bg-primary-600' : 'bg-primary-500')
                            : (darkMode ? 'bg-gray-600' : 'bg-gray-500')
                        }`}>
                          {message.avatar}
                        </div>
                        <div className={`px-4 py-2 rounded-2xl ${
                          message.sender === 'user'
                            ? `${darkMode ? 'bg-primary-600 text-white' : 'bg-primary-500 text-white'}`
                            : `${darkMode ? 'bg-gray-700 text-white' : 'bg-gray-100 text-gray-900'}`
                        }`}>
                          <p className="text-sm">{message.text}</p>
                          <p className={`text-xs mt-1 ${
                            message.sender === 'user'
                              ? 'text-primary-100'
                              : darkMode ? 'text-gray-400' : 'text-gray-500'
                          }`}>
                            {formatTime(message.timestamp)}
                          </p>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                ))}

                {/* Typing Indicator */}
                {isTyping && (
                  <motion.div
                    initial={{ opacity: 0, y: 10 }}
                    animate={{ opacity: 1, y: 0 }}
                    className="flex justify-start"
                  >
                    <div className="max-w-xs lg:max-w-md">
                      <div className="flex items-end space-x-2">
                        <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                          darkMode ? 'bg-gray-600' : 'bg-gray-500'
                        }`}>
                          üë®‚Äçüíº
                        </div>
                        <div className={`px-4 py-2 rounded-2xl ${
                          darkMode ? 'bg-gray-700' : 'bg-gray-100'
                        }`}>
                          <div className="flex space-x-1">
                            <div className={`w-2 h-2 rounded-full animate-bounce ${
                              darkMode ? 'bg-gray-400' : 'bg-gray-500'
                            }`}></div>
                            <div className={`w-2 h-2 rounded-full animate-bounce ${
                              darkMode ? 'bg-gray-400' : 'bg-gray-500'
                            }`} style={{ animationDelay: '0.1s' }}></div>
                            <div className={`w-2 h-2 rounded-full animate-bounce ${
                              darkMode ? 'bg-gray-400' : 'bg-gray-500'
                            }`} style={{ animationDelay: '0.2s' }}></div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </motion.div>
                )}
              </div>

              {/* Message Input */}
              <div className={`p-4 border-t ${
                darkMode ? 'border-gray-700' : 'border-gray-200'
              }`}>
                <div className="flex space-x-3">
                  <input
                    type="text"
                    value={newMessage}
                    onChange={(e) => setNewMessage(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                    placeholder="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è..."
                    className={`flex-1 px-4 py-3 border rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-colors ${
                      darkMode 
                        ? 'bg-gray-700 border-gray-600 text-white placeholder-gray-400' 
                        : 'bg-white border-gray-300 text-gray-900 placeholder-gray-500'
                    }`}
                  />
                  <button
                    onClick={handleSendMessage}
                    disabled={!newMessage.trim()}
                    className="bg-primary-600 hover:bg-primary-700 disabled:bg-primary-400 text-white p-3 rounded-lg transition-colors"
                  >
                    <Send className="w-5 h-5" />
                  </button>
                </div>
              </div>
            </div>
          </motion.div>
        </div>
      </div>
    </div>
  )
}

export default ChatSupport 